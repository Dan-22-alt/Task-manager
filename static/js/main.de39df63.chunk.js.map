{"version":3,"sources":["index.js","../node_modules/express/lib sync","database.js","routes/task-routes.js","models/task.js"],"names":["express","require","morgan","path","app","mongoose","set","process","PORT","use","json","static","join","__dirname","listen","get","console","log","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","connect","then","db","catch","err","router","Router","Task","res","a","find","tasks","findById","params","task","post","body","title","description","save","status","put","newTask","findByIdAndUpdate","delete","findByIdAndRemove","TaskSchema","Schema","type","String","required","model"],"mappings":"4FAAA,gBAAMA,EAAUC,EAAQ,IAClBC,EAASD,EAAQ,KACjBE,EAAOF,EAAQ,IAIfG,GAFeH,EAAQ,KAArBI,SAEIL,KAGZI,EAAIE,IAAI,OAAQC,gJAAYC,MAAQ,KAGpCJ,EAAIK,IAAIP,EAAO,QACfE,EAAIK,IAAIT,EAAQU,QAGhBN,EAAIK,IAAI,aAAcR,EAAQ,MAG9BG,EAAIK,IAAIT,EAAQW,OAAOR,EAAKS,KAAKC,EAAW,eAG5CT,EAAIU,OAAQV,EAAIW,IAAI,SAAS,WACzBC,QAAQC,IAAR,yBAA8Bb,EAAIW,IAAI,e,sICvB1C,SAASG,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,oQCRzB,IAAMtB,EAAWJ,EAAQ,KAMzBI,EAASuB,QAHG,gHAIPC,MAAK,SAAAC,GAAE,OAAId,QAAQC,IAAI,sBACvBc,OAAM,SAAAC,GAAG,OAAIhB,QAAQC,IAAIe,MAE9BP,EAAOC,QAAUrB,G,gFCTX4B,EADUhC,EAAQ,IACDiC,SAEjBC,EAAOlC,EAAQ,KAErBgC,EAAOlB,IAAI,IAAX,uCAAgB,WAAOI,EAAKiB,GAAZ,eAAAC,EAAA,sEACQF,EAAKG,OADb,OACNC,EADM,OAEZvB,QAAQC,IAAIsB,GACZH,EAAI1B,KAAK6B,GAHG,2CAAhB,yDAMAN,EAAOlB,IAAI,OAAX,uCAAmB,WAAOI,EAAKiB,GAAZ,eAAAC,EAAA,sEACIF,EAAKK,SAASrB,EAAIsB,OAAOd,IAD7B,OACTe,EADS,OAEfN,EAAI1B,KAAKgC,GAFM,2CAAnB,yDAKAT,EAAOU,KAAK,IAAZ,uCAAiB,WAAOxB,EAAKiB,GAAZ,qBAAAC,EAAA,+DACkBlB,EAAIyB,KAA3BC,EADK,EACLA,MAAOC,EADF,EACEA,YACTJ,EAAO,IAAIP,EAAK,CAAEU,QAAOC,gBAFlB,SAGPJ,EAAKK,OAHE,OAIbX,EAAI1B,KAAK,CAACsC,OAAO,eAJJ,2CAAjB,yDAOAf,EAAOgB,IAAI,OAAX,uCAAmB,WAAO9B,EAAKiB,GAAZ,qBAAAC,EAAA,+DACgBlB,EAAIyB,KAA3BC,EADO,EACPA,MAAOC,EADA,EACAA,YACTI,EAAU,CAACL,QAAOC,eAFT,SAGTX,EAAKgB,kBAAkBhC,EAAIsB,OAAOd,GAAIuB,GAH7B,OAIfd,EAAI1B,KAAK,CAACsC,OAAO,iBAJF,2CAAnB,yDAOAf,EAAOmB,OAAO,OAAd,uCAAsB,WAAOjC,EAAKiB,GAAZ,SAAAC,EAAA,sEACZF,EAAKkB,kBAAkBlC,EAAIsB,OAAOd,IADtB,OAElBS,EAAI1B,KAAK,CAACsC,OAAO,iBAFC,2CAAtB,yDAKAvB,EAAOC,QAAUO,G,0CCnCjB,IAAM5B,EAAWJ,EAAQ,KAGnBqD,EAAa,IAAIC,EAFJlD,EAAXkD,QAEsB,CAC1BV,MAAO,CAAEW,KAAMC,OAAQC,UAAU,GACjCZ,YAAa,CAAEU,KAAMC,OAAQxD,SAAS,KAG1CwB,EAAOC,QAAUrB,EAASsD,MAAM,OAAQL,K","file":"static/js/main.de39df63.chunk.js","sourcesContent":["const express = require('express');\r\nconst morgan = require('morgan')\r\nconst path = require('path');\r\n\r\nconst { mongoose } = require('./database');\r\n\r\nconst app = express();\r\n\r\n// Settings\r\napp.set('port', process.env.PORT || 3000 )\r\n\r\n// Middlewares\r\napp.use(morgan('dev'));\r\napp.use(express.json());\r\n\r\n// Routes\r\napp.use('/api/tasks', require('./routes/task-routes'));\r\n\r\n// Static files\r\napp.use(express.static(path.join(__dirname, '../public')))\r\n\r\n// Starting the server\r\napp.listen( app.get('port'), () => {\r\n    console.log(`Server on port ${app.get('port')}`)\r\n});","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 234;","const mongoose = require('mongoose');\r\n\r\n// const URI = 'mongodb://localhost/auth';\r\nconst URI = 'mongodb+srv://dan:Dnsanianlau22@taskmancluster.pgq4v.mongodb.net/myFirstDatabase?retryWrites=true&w=majority';\r\n\r\n\r\nmongoose.connect(URI)\r\n    .then(db => console.log('DB is connected'))\r\n    .catch(err => console.log(err));\r\n\r\nmodule.exports = mongoose;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst Task = require('../models/task');\r\n\r\nrouter.get('/', async (req, res) =>{\r\n    const tasks = await Task.find();\r\n    console.log(tasks);\r\n    res.json(tasks);\r\n});\r\n\r\nrouter.get('/:id', async (req, res) =>{\r\n    const task = await Task.findById(req.params.id);\r\n    res.json(task);\r\n})\r\n\r\nrouter.post('/', async (req, res) =>{\r\n    const { title, description } = req.body;\r\n    const task = new Task({ title, description });\r\n    await task.save();\r\n    res.json({status:'Task Saved'});\r\n});\r\n\r\nrouter.put('/:id', async (req, res)=> {\r\n    const { title, description } = req.body;\r\n    const newTask = {title, description};\r\n    await Task.findByIdAndUpdate(req.params.id, newTask);\r\n    res.json({status:'Task Updated'});\r\n});\r\n\r\nrouter.delete('/:id', async (req, res) =>{\r\n    await Task.findByIdAndRemove(req.params.id)\r\n    res.json({status:'Task Deleted'});\r\n})\r\n\r\nmodule.exports = router;","const mongoose = require('mongoose');\r\nconst { Schema } = mongoose;\r\n\r\nconst TaskSchema = new Schema({\r\n    title: { type: String, required: true },\r\n    description: { type: String, require: true } \r\n});\r\n\r\nmodule.exports = mongoose.model('Task', TaskSchema);\r\n"],"sourceRoot":""}